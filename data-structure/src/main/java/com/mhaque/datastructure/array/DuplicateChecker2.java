package com.mhaque.datastructure.array;
import java.lang.*;
import java.time.*;

public class DuplicateChecker2 {

    public static void main(String[] args) {

        // 500 random, unsorted numbers ranging from 0 to 5,000
        int compositeGrades [] =
                {4255, 2701, 2679, 738, 2025, 3565, 4019, 2534, 3513, 4975, 1097, 941,
                        900, 520, 3244, 3782, 4895, 4132, 808, 3876, 2730, 2999, 2543,
                        3769, 1181, 2487, 839, 1566, 3720, 75, 1983, 3803, 3365, 1938,
                        3751, 2854, 4708, 2556, 1694, 3663, 3796, 1939, 2318, 1852, 2054,
                        4963, 209, 363, 4241, 236, 3195, 4590, 3691, 2141, 620, 4334,
                        1989, 1157, 3435, 2776, 4899, 340, 4492, 2184, 3169, 2717, 3433,
                        9401, 1692, 666, 522, 100, 2707, 1759, 631, 3037, 222, 3620, 2333,
                        1469, 2234, 2494, 3142, 3327, 4109, 4268, 4285, 4545, 3688, 3514,
                        1875, 970, 4268, 1210, 1712, 3047, 4226, 784, 1364, 137, 3387,
                        1286, 590, 3371, 2858, 4532, 1625, 812, 110, 168, 3208, 1379, 496,
                        2930, 3994, 1647, 2880, 708, 3078, 3191, 4269, 2000, 2407, 557,
                        1703, 3433, 4314, 1380, 2535, 3505, 360, 1798, 2634, 1086, 138,
                        668, 544, 2795, 2130, 407, 3013, 2138, 3676, 2748, 4522, 1099,
                        4957, 2733, 1728, 606, 3073, 1601, 1059, 4934, 2091, 112, 39, 1658,
                        2603, 994, 634, 4950, 3737, 1175, 1632, 1601, 1554, 4159, 1817,
                        368, 1359, 4511, 4364, 2818, 1895, 3980, 4960, 1683, 4194, 2232,
                        3433, 2721, 2851, 1009, 4698, 1601, 4474, 3741, 1445, 4601, 3164,
                        2715, 715, 2766, 869, 732, 4430, 3133, 3037, 2204, 3323, 700, 2739,
                        834, 283, 458, 4974, 4577, 3809, 1942, 4333, 4679, 2401, 2871,
                        1575, 2003, 3358, 2069, 883, 3258, 3633, 3256, 2210, 4761, 2673,
                        794, 4098, 3161, 318, 2937, 2944, 2495, 3034, 2569, 3777, 4864,
                        2619, 4926, 1262, 188, 1448, 1746, 2757, 4391, 2197, 457, 2212,
                        4229, 4129, 1354, 2697, 105, 3744, 2119, 2342, 3280, 2828, 2518,
                        2894, 209, 299, 1531, 2732, 4066, 1219, 1834, 2571, 143, 4161,
                        4774, 4264, 2561, 1628, 365, 3810, 3937, 274, 3039, 2846, 1311,
                        2035, 4932, 3927, 4216, 4403, 4349, 1858, 3058, 2992, 3247, 3018,
                        3552, 3117, 1457, 349, 2432, 393, 2971, 2400, 1908, 10, 1695, 2823,
                        533, 4105, 2698, 2052, 4640, 3157, 4689, 1055, 3311, 1417, 4723,
                        163, 2947, 910, 305, 1875, 3939, 3379, 1997, 1838, 1079, 3154, 577,
                        2781, 695, 3750, 1387, 1689, 1489, 2973, 4795, 3887, 1862, 595,
                        1606, 80, 1104, 2896, 1072, 3211, 3713, 4102, 4350, 977, 4064,
                        3691, 4016, 612, 4783, 377, 3469, 4683, 668, 838, 3216, 2547, 821,
                        3436, 2569, 3718, 1091, 3017, 4759, 3728, 1091, 2477, 3159, 2063,
                        1166, 1880, 419, 3697, 4535, 4469, 2636, 250, 4818, 1441, 1379,
                        4721, 2902, 4609, 3394, 3099, 1791, 1709, 4418, 4590, 2709, 2723,
                        2512, 2530, 3262, 2917, 1083, 4134, 17, 4791, 1039, 4125, 3441,
                        2616, 2159, 2934, 3211, 2441, 3648, 2017, 1998, 2526, 3847, 4153,
                        559, 3486, 4863, 4817, 3120, 2718, 4995, 4809, 3977, 264, 2324,
                        1519, 4231, 2765, 4609, 3237, 4914, 4099, 3241, 3978, 394, 3109,
                        2476, 4066, 2637, 3334, 2087, 3183, 4643, 2599, 2138, 4513, 3413,
                        1495, 1664, 355, 4377, 2293, 2874, 3060, 1648, 2206, 2937, 2493,
                        1013, 3327, 4852, 376, 4014, 4762, 1198, 4829, 1629, 3786, 2468,
                        208, 1488, 2138, 3692, 3283, 92, 4720, 1569, 3783, 2150, 3333,
                        3781, 3003, 1113, 2764, 4816, 4354, 2870, 2447, 1740, 2242, 546,
                        2457, 1114, 3953, 1916, 3804, 3257, 243, 555};
        int i, j;

        // Save current date-time in UTC
        Instant start = Instant.now();

        // search for duplicates
        boolean dupeFound = false;
        int iterations = 0;
        for (i = 0; i < compositeGrades.length; i++) {
            for (j = 0; j < compositeGrades.length; j++) {
                if (i != j && compositeGrades[i] == compositeGrades[j]) {
                    iterations++;
                    dupeFound = true;
                }
            }
        }
        if (dupeFound)
            System.out.println("Duplicate value found.");
        else
            System.out.println("No duplicates found.");
        System.out.println("Iterations: " + iterations);

        // Save current date-time in UTC
        Instant end = Instant.now();
        System.out.println("Time elapsed: " + Duration.between(start, end).toMillis() + " milliseconds.");

    }
}
